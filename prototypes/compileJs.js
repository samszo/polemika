/** Part of ThotWeb 2.0
 * @author Erwan Brottier - erwan.brottier@amo-it.com - https://amo-it.com/
 * @version 1.0
 * @date 01/05/2020
 * @category ThotWeb component
 * @copyright (c) 2011-2020 Erwan Brottier */

var fs = require('fs'),
    path = require('path'),
	babel = require("babel-core");
	Terser = require("terser");

/* > generated by Thot */
var data = [
    {
        file : 'media/common/jquery/jquery-3.3.1.min.js',
        babelize : false,
        compress : false,
    },
    {
        file : 'media/js/bootstrap.min.js',
        babelize : false,
        compress : false,
    },
    {
        file : 'media/common/jquery-slicknav/js/jquery.slicknav.js',
        babelize : false,
        compress : true,
    },
    {
        file : 'media/js/owl.carousel.min.js',
        babelize : false,
        compress : false,
    },
    {
        file : 'media/js/main.js',
        babelize : false,
        compress : true,
    },
    {
        file : 'media/js/orchestrator.js',
        babelize : false,
        compress : true,
    },
    {
        file : 'media/common/d3js/d3.V5.min.js',
        babelize : false,
        compress : false,
    },
    {
        file : 'media/js/reseau.js',
        babelize : false,
        compress : true,
    },
    {
        file : 'media/js/menuSunburst.js',
        babelize : false,
        compress : true,
    },
    {
        file : 'media/js/geoLoc.js',
        babelize : false,
        compress : true,
    },
    {
        file : 'media/js/proto.js',
        babelize : false,
        compress : true,
    },
	
    {
        file : 'media/js/MagicObject.js',
        babelize : false,
        compress : true,
    },
    {
        file : 'media/js/MagicNode.js',
        babelize : false,
        compress : true,
    },
    {
        file : 'media/js/McButton.js',
        babelize : false,
        compress : true,
    },
    {
        file : 'media/js/McModal.js',
        babelize : false,
        compress : true,
    },
    {
        file : 'media/js/spin.min.js',
        babelize : false,
        compress : true,
    }
]

/* < generated by Thot */

var addDebugConsole = true;

var babelOptions = {
	presets: [["env"]],
	plugins: [require('babel-plugin-transform-es2015-modules-commonjs')]
};
var uglifyOptions = {
	output : {
		comments : "/^!|@license|@cc_on|@preserve/i"		
	}
}

var babelizeJs = function(code) {
	var compiledCode = babel.transform(code, babelOptions);
	return compiledCode.code;
}
var minifyJs = function(code) { 
	return new Promise(resolve => {
		var result = Terser.minify(code).then(function(min) {
			resolve(min.code);
		});			
	});
};

const waitFor = async function(ms) {
	return new Promise(resolve => {
		setTimeout(
			function(){ 
				resolve();
			},
			ms
		);
	});	
}

const asyncForEach = async function(array, callback) {
  for (let index = 0; index < array.length; index++) {
    await callback(array[index], index, array)
  }
}

const treatData = async function() {
	console.log("> begin process");
	var globalJs = "";
	var globalJsCompiled = "";
	var globalJsCompiledMin = "";
	
	console.log("> build scripts");
	await asyncForEach(data, async function(item) {
		var file = item.file;
		var code = fs.readFileSync(file, 'utf8');
		var begin = "";
		if (addDebugConsole) {
			begin = "\n"+"//>> "+item.file+"\n";
			begin += "console.log('"+item.file+"');\n"+"\n";
		}
		var end = ";\n";
		globalJs = globalJs + begin + code + end;		
		if (item.babelize) {
			console.log("> babelize", file);
			code = babelizeJs(code);
		}		
		globalJsCompiled = globalJsCompiled + begin + code + end;
				
		if (item.compress) {
			console.log("> minify", file);
			code = await minifyJs(code);
		}
		globalJsCompiledMin = globalJsCompiledMin + begin + code + end;
	})
	
	console.log("> save scripts");
	var newFile = 'media/js/global.js';
	console.log("> write", newFile);
	fs.writeFile(newFile, globalJs, function(e) {
		if (e)
			console.log(e);
	});
	newFile = 'media/js/global.compiled.js';
	console.log("> write", newFile);
	fs.writeFile(newFile, globalJsCompiled, function(e) {
		if (e)
			console.log(e);
	});
	newFile = 'media/js/global.compiled.min.js';
	console.log("> write", newFile);
	fs.writeFile(newFile, globalJsCompiledMin, function(e) {
		if (e)
			console.log(e);
	});	
	console.log("> end process");
}
treatData();